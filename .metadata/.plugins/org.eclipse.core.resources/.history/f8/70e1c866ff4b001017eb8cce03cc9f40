package oper;
// 7번 : 비트연산자
public class BitOper {

	public static void main(String[] args) {
		System.out.println(10 & 11); // 1010 & 1011 == 1010
		System.out.println(10 | 11); // 1010 | 1011 == 1011
//		System.out.println(10 || 11); // 비트 연산은 한개의 비트연산자만 들어가야한다.
		System.out.println(10 ^ 11); // 1010 ^ 1011 == 0001
		System.out.println(~10); // -11
		
		System.out.println("10진수 : " + 10 + " => 2진수 : " + Integer.toBinaryString(10)); 
		// 10을 변환한 1010 이라는 2진수를 표기하기 위해 toBinaryString()메소드를 이용했다. 소괄호안에는 정수형 타입의 값을 입력해야한다.
		System.out.println("10진수 : " + 11 + " => 2진수 : " + Integer.toBinaryString(11)); // 1011
		// 11을 변환한 1011 이라는 2진수를 표기하기 위해 toBinaryString()메소드를 이용했다. 소괄호안에는 정수형 타입의 값을 입력해야한다.
		// & : 두 비트가 모두 1이면 1, 하나라도 0이면 0
		System.out.println("10 & 11 의 10진수 : " + (10 & 11));
		System.out.println("10 & 11 의 10진수 : " + Integer.toBinaryString(10 & 11));
		// 10 & 11의 비트연산 결과
		// | : 두 비트 중 하나라도 1이면 1, 모두 0이면 0
		System.out.println("10 | 11 의 10진수 : " + (10 | 11));
		System.out.println("10 | 11 의 10진수 : " + Integer.toBinaryString(10 | 11));
		
		// ^ : 두 비트가 서로 다르면 1, 같으면 0
		System.out.println("10 ^ 11 의 10진수 : " + (10 ^ 11));
		System.out.println("10 ^ 11 의 10진수 : " + Integer.toBinaryString(10 ^ 11));
		
		// ~ : 0을 1로, 1을 0으로
		// 공식 : ~x => -(x+1)
		System.out.println("~10의 10진수 : " + (~10));
		System.out.println("~10의 10진수 : " + Integer.toBinaryString(~10));
		System.out.println(" ~5의 10진수 : " + (~5));
		System.out.println(" ~5의 10진수 : " + Integer.toBinaryString(~5));
		

		System.out.println(10 & 11 + 1);
	}

}
